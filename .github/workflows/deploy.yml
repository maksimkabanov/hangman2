name: Deploy to AWS

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: AWS Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Cleanup old build_new directory
        run: ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "rm -rf /var/www/hangman/build_new"

      - name: Prepare new build directory
        run: ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "mkdir -p /var/www/hangman/build_new"

      - name: Deploy new build via SCP
        run: scp -r -i ~/.ssh/id_ed25519 build/* ubuntu@${{ secrets.SERVER_IP }}:/var/www/hangman/build_new/

      - name: Atomically swap build folders
        run: |
          ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "
            cd /var/www/hangman &&
            if [ -d build ]; then
              mv build build_old_$(date +%Y%m%d%H%M%S)
            fi
            mv build_new build
          "

      - name: Set correct permissions
        run: ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "sudo chown -R www-data:www-data /var/www/hangman/build && sudo chmod -R 755 /var/www/hangman/build"

      #- name: Restart Nginx (optional, only if needed)
      #  run: ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "sudo systemctl restart nginx"

      - name: Cleanup old builds
        run: |
          ssh -i ~/.ssh/id_ed25519 ubuntu@${{ secrets.SERVER_IP }} "
            cd /var/www/hangman &&
            ls -dt build_old_* | tail -n +6 | xargs rm -rf || true"
